---
import Header from '@components/Header.astro'
import Editor from '@components/Editor.astro'
import NoteList from '@components/NoteList.astro'
import Shortcuts from '@components/Shortcuts.astro'
import Instructions from '@components/Instructions.astro'
import ActionsMenu from './ActionMenu.astro'

// For loading published notes
const captureNoteId = RegExp(/notes?\/(.*)\/?/, 'g')
const noteId = captureNoteId.exec(Astro.url.pathname)?.[1] || false

const { editorVersion } = Astro.props
---

<Header editorVersion={editorVersion} />
<ActionsMenu />
<main>
	<Editor />
	<NoteList />
</main>
<Instructions />
<Shortcuts />
{noteId && <span id="id-storage" data-id={noteId} hidden />}
<span id="v" data-v={editorVersion || 1} hidden></span>
<script>
	// Bad code doesn't mean bad product üôèüèª
	import { registerServiceWorker } from '@scripts/utils/serviceWorkers'
	registerServiceWorker('/sw.js')

	import MicroModal from 'micromodal'
	MicroModal.init({ disableFocus: true, debug: false })

	import { createEditor } from '@scripts/editor/create'
	import { createEditor as createEditor2 } from '@scripts/editor2/create'
	import { initDragAndDrop } from '@scripts/editor/initDragAndDrop'
	import { reopenLastNote } from '@scripts/editor/reopenLastNote'
	import { initShortcuts } from '@scripts/editor/shortcuts'
	import { header } from '@scripts/header/elements'
	import { loadByURL } from '@scripts/note/loadByURL'
	import { toggleAutosave } from '@scripts/note/save'
	import { updateNotesList } from '@scripts/render/notes'
	import { initStatus } from '@scripts/render/showStatus'
	import { initState, state } from '@scripts/state'
	import { setFocus } from '@scripts/utils/setFocus'
	import {
		initFocusListener,
		initNavigationListener,
		initUnloadListener,
	} from '@scripts/utils/systemListenters'
	import { initHeaderElements } from '@scripts/header/elements'
	import { initHeaderListeners } from '@scripts/header/listeners'

	await initState()
	initHeaderElements()
	initHeaderListeners()
	// initMenuElements()
	initStatus(header.headerEl)

	console.debug(`Current editor version: v${state.editorVersion}`)
	switch (state.editorVersion) {
		case '1':
		default: {
			state.editor = await createEditor()
			break
		}
		case '2': {
			state.editor2 = createEditor2()
			state.editorEl = state.editor2.options.element
				.firstChild as HTMLElement
			break
		}
	}

	await loadByURL()
	reopenLastNote()
	updateNotesList()
	setFocus(state.editorEl)
	toggleAutosave(true)

	initShortcuts()
	initNavigationListener()
	initFocusListener()
	initUnloadListener()
	// initMenuListeners()
	initDragAndDrop()
</script>
